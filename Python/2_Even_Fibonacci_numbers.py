#!/usr/bin/python2.7 -tt

"""
Even Fibonacci numbers

Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed 
four million, find the sum of the even-valued terms.
"""

def sum_of_fibonacci():
  """
  Returns the sum of even-valued terms in Fibonacci sequence where last term
  is less than 4,000,000 (4 million)
  """
  sum = 0
  for num in fib(100):
    sum += num

  return sum

def fib(n):
  """
  Return the list of even-valued fibonacci sequence numbers where last term
  is less than 4 million
  """
  fib_seq = []

  a = 1
  b = 2
  for i in range(1,n):
    if i == 1: fib_seq.append(a)
    elif i == 2: fib_seq.append(b)
    else:
      n = a+b
      if n > 4000000:
        return fib_seq
      elif n%2 == 0:
        fib_seq.append(n)
      a = b
      b = n

  return fib_seq

# Gather our code in a main() function
def main():
  print sum_of_fibonacci()

# Standard boilerplate to call the main() function to begin the program.
if __name__ == '__main__':
  main()